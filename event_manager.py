# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _event_manager
else:
    import _event_manager

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


EM_SUCCESS = _event_manager.EM_SUCCESS
EM_OUT_OF_MEMORY = _event_manager.EM_OUT_OF_MEMORY
EM_NULL_ARGUMENT = _event_manager.EM_NULL_ARGUMENT
EM_INVALID_DATE = _event_manager.EM_INVALID_DATE
EM_INVALID_EVENT_ID = _event_manager.EM_INVALID_EVENT_ID
EM_EVENT_ALREADY_EXISTS = _event_manager.EM_EVENT_ALREADY_EXISTS
EM_EVENT_ID_ALREADY_EXISTS = _event_manager.EM_EVENT_ID_ALREADY_EXISTS
EM_EVENT_NOT_EXISTS = _event_manager.EM_EVENT_NOT_EXISTS
EM_EVENT_ID_NOT_EXISTS = _event_manager.EM_EVENT_ID_NOT_EXISTS
EM_INVALID_MEMBER_ID = _event_manager.EM_INVALID_MEMBER_ID
EM_MEMBER_ID_ALREADY_EXISTS = _event_manager.EM_MEMBER_ID_ALREADY_EXISTS
EM_MEMBER_ID_NOT_EXISTS = _event_manager.EM_MEMBER_ID_NOT_EXISTS
EM_EVENT_AND_MEMBER_ALREADY_LINKED = _event_manager.EM_EVENT_AND_MEMBER_ALREADY_LINKED
EM_EVENT_AND_MEMBER_NOT_LINKED = _event_manager.EM_EVENT_AND_MEMBER_NOT_LINKED
EM_ERROR = _event_manager.EM_ERROR

def createEventManager(date):
    return _event_manager.createEventManager(date)

def destroyEventManager(em):
    return _event_manager.destroyEventManager(em)

def emAddEventByDate(em, event_name, date, event_id):
    return _event_manager.emAddEventByDate(em, event_name, date, event_id)

def emAddEventByDiff(em, eventName, days, event_id):
    return _event_manager.emAddEventByDiff(em, eventName, days, event_id)

def emRemoveEvent(em, event_id):
    return _event_manager.emRemoveEvent(em, event_id)

def emChangeEventDate(em, event_id, new_date):
    return _event_manager.emChangeEventDate(em, event_id, new_date)

def emAddMember(em, member_name, member_id):
    return _event_manager.emAddMember(em, member_name, member_id)

def emAddMemberToEvent(em, member_id, event_id):
    return _event_manager.emAddMemberToEvent(em, member_id, event_id)

def emRemoveMemberFromEvent(em, member_id, event_id):
    return _event_manager.emRemoveMemberFromEvent(em, member_id, event_id)

def emTick(em, days):
    return _event_manager.emTick(em, days)

def emGetEventsAmount(em):
    return _event_manager.emGetEventsAmount(em)

def emGetNextEvent(em):
    return _event_manager.emGetNextEvent(em)

def emPrintAllEvents(em, file_name):
    return _event_manager.emPrintAllEvents(em, file_name)

def emPrintAllResponsibleMembers(em, file_name):
    return _event_manager.emPrintAllResponsibleMembers(em, file_name)


